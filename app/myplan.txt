********* LocalStorageChecker as a normal function ***********


// LocalStorageChecker.js
export default function LocalStorageChecker() {
    let book, lineNumber;

    // Check if values exist in localStorage
    if (localStorage.getItem('book') && localStorage.getItem('lineNumber')) {
        book = localStorage.getItem('book');
        lineNumber = localStorage.getItem('lineNumber');
    } else {
        // Generate random values if they don't exist
        book = Math.floor(Math.random() * 12) + 1; // Random book between 1 and 12
        lineNumber = Math.floor(Math.random() * 1000) + 1; // Random line number between 1 and 1000

        // Store values in localStorage
        localStorage.setItem('book', book);
        localStorage.setItem('lineNumber', lineNumber);
    }

    // Return values
    return { book, lineNumber };
}

// Prophecy.js
export default function Prophecy({ book, lineNumber }) {
    // Fetch English and Latin passages based on book and lineNumber
    // Return passages
}

// Page.js
export default function Page() {
    // Render LocalStorageChecker to get book and lineNumber
    const { book, lineNumber } = LocalStorageChecker();

    // Render Prophecy with book and lineNumber as props
    return <Prophecy book={book} lineNumber={lineNumber} />;
}



********* LocalStorageChecker as a React Component ***********
// LocalStorageChecker.js
import { useEffect } from 'react';

export default function LocalStorageChecker({ setBook, setLineNumber }) {
    useEffect(() => {
        let book, lineNumber;

        // Check if values exist in localStorage
        if (localStorage.getItem('book') && localStorage.getItem('lineNumber')) {
            book = localStorage.getItem('book');
            lineNumber = localStorage.getItem('lineNumber');
        } else {
            // Generate random values if they don't exist
            book = Math.floor(Math.random() * 12) + 1; // Random book between 1 and 12
            lineNumber = Math.floor(Math.random() * 1000) + 1; // Random line number between 1 and 1000

            // Store values in localStorage
            localStorage.setItem('book', book);
            localStorage.setItem('lineNumber', lineNumber);
        }

        // Update state in Page component
        setBook(book);
        setLineNumber(lineNumber);
    }, []);

    return null; // This component doesn't render anything
}

// Page.js
import { useState } from 'react';

export default function Page() {
    const [book, setBook] = useState(null);
    const [lineNumber, setLineNumber] = useState(null);

    // Render LocalStorageChecker to get book and lineNumber
    return (
        <>
            <LocalStorageChecker setBook={setBook} setLineNumber={setLineNumber} />
            {book && lineNumber && <Prophecy book={book} lineNumber={lineNumber} />}
        </>
    );
}

// Prophecy.js
export default function Prophecy({ book, lineNumber }) {
    // Fetch English and Latin passages based on book and lineNumber
    // Return passages
}